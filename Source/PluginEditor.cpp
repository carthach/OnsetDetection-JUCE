/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
OnsetDetectorAudioProcessorEditor::OnsetDetectorAudioProcessorEditor (OnsetDetectorAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
    
    label.setBounds(20, 20, 50, 50);
    label.setText("BEAT", NotificationType::dontSendNotification);
    addAndMakeVisible(label);
    
    startTimer(1000.0/30.0);
    
    thresholdSlider.setSliderStyle(Slider::SliderStyle::LinearVertical);
    thresholdSlider.setBounds(100, 50, 20, 100);
    thresholdSlider.setRange(0.0f, 1.0f);
    thresholdSlider.addListener(this);
    addAndMakeVisible(thresholdSlider);
    
}

OnsetDetectorAudioProcessorEditor::~OnsetDetectorAudioProcessorEditor()
{
}

//==============================================================================
void OnsetDetectorAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("Hello World!", getLocalBounds(), Justification::centred, 1);
}

void OnsetDetectorAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
}

void OnsetDetectorAudioProcessorEditor::timerCallback()
{
    if(!processor.odValue)
        label.setColour(Label::ColourIds::backgroundColourId, Colour::fromRGB(0, 255, 0));
    else
        label.setColour(Label::ColourIds::backgroundColourId, Colour::fromRGB(255,0 , 0));

}

void OnsetDetectorAudioProcessorEditor::sliderValueChanged (Slider *slider)
{
    if(slider == &thresholdSlider)
        processor.od.fixedThreshold = slider->getValue();
}